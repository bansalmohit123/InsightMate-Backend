// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

}

model User {
  id         String @id @default(cuid())
  username   String
  email      String @unique
  password   String
  Document   Document[]
  URLDocument URLDocument[]
  YoutubeVideo YouTubeVideo[]
  ChatbotSession ChatbotSession[]
}

model Document {
  id        String   @id @default(uuid())
  title     String
  description String
  content   String
  embedding Bytes  // Use Bytes to store vector data (manual encoding required)
  userId    String
  sessionID String?
  User      User     @relation(fields: [userId], references: [id])
}

model URLDocument {
  id        String   @id @default(uuid())
  url       String   @unique
  title     String
  description String
  content   String
  embedding Bytes    // Store embedding as bytes
  userId    String
  sessionID String?
  User      User     @relation(fields: [userId], references: [id])
}

model YouTubeVideo {
  id        String   @id @default(uuid())
  url       String   @unique
  description String
  title     String
  transcript String
  embedding Bytes    // Store embedding as bytes
  userId    String
  sessionID String?  // Optional session ID
  User      User     @relation(fields: [userId], references: [id])
}

model ChatbotSession {
  id          String  @id @default(uuid()) // Unique Session ID
  userId      String  // ID of the user who created the session
  chatbotType String  // "Document", "Webpage", "YouTube"
  title       String  // Title of the chatbot session
  description String? // Optional session description
  createdAt   DateTime @default(now()) // Timestamp when session was created

  messages    ChatMessage[] // Relation to chat messages
  User        User         @relation(fields: [userId], references: [id])
}

model ChatMessage {
  id          String  @id @default(uuid()) // Unique ID for each message
  sessionId   String  // Links message to a chatbot session
  sender      String  // "user" or "bot"
  message     String  // Chat message content
  timestamp   DateTime @default(now()) // Message timestamp

  ChatbotSession ChatbotSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}
